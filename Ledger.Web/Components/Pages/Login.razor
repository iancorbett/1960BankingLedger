@page "/Pages/Login"
@attribute [AllowAnonymous]
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Nav


<h3>Log in</h3>

<EditForm Model="_model" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="_model.Email" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText class="form-control" type="password" @bind-Value="_model.Password" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="_model.RememberMe" />
        <label class="form-check-label">Remember me</label>
    </div>

    <button class="btn btn-primary" type="submit" disabled="@_busy">Log In</button>
    <a class="btn btn-link" href="/Pages/Signup">Create account</a>

    @if (!string.IsNullOrWhiteSpace(_error))
    {
        <div class="text-danger mt-2">@_error</div>
    }
</EditForm>

@code {
    private LoginModel _model = new();
    private string? _error;
    private bool _busy;

    private async Task HandleLogin()
    {
        _busy = true; _error = null;

        var res = await SignInManager.PasswordSignInAsync(
            userName: _model.Email,
            password: _model.Password,
            isPersistent: _model.RememberMe,
            lockoutOnFailure: false);

        if (!res.Succeeded)
        {
            _error = res.IsLockedOut ? "Account locked." : "Invalid email or password.";
            _busy = false;
            return;
        }

        // force full reload so the auth cookie binds to the circuit
        Nav.NavigateTo("/", forceLoad: true);
    }

    public class LoginModel
    {
        [Required, EmailAddress] public string Email { get; set; } = "";
        [Required, MinLength(6)] public string Password { get; set; } = "";
        public bool RememberMe { get; set; } = true;
    }
}